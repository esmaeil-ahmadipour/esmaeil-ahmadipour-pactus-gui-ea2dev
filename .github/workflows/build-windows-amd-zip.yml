name: Build & Release Windows (AMD64/Zip)

on:
  push:
    tags:
      - 'v*'

env:
  FLUTTER_VERSION: 3.32.0
  TARGET_OS: windows # example `linux` , `windows` , `macos`
  ARCH: amd64 # example `arm64` , `amd64`
  FILE_TYPE: zip # example `AppImage` , `zip` , `dmg`

permissions:
  contents: write

jobs:
  build-and-release:
    runs-on: windows-latest
    outputs:
      tag_name: ${{ steps.set-outputs.outputs.tag_name }}
      download_link: ${{ steps.set-outputs.outputs.download_link }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Flutter ${{ env.FLUTTER_VERSION }}
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: stable

      - name: Configure Flutter
        run: |
          flutter doctor -v
          flutter config --enable-${{ env.TARGET_OS }}-desktop
          flutter precache --${{ env.TARGET_OS }}

      - name: Install dependencies
        shell: pwsh
        run: |
          # Ensure Chocolatey is installed
          if (-not (Get-Command choco -ErrorAction SilentlyContinue)) {
          Set-ExecutionPolicy Bypass -Scope Process -Force
          [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.SecurityProtocolType]::Tls12
          Invoke-Expression ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
          }
          
          # Install packages one by one
          choco install -y pkgconfiglite --no-progress
          choco install -y cmake --installargs 'ADD_CMAKE_TO_PATH=System' --no-progress
          choco install -y ninja --no-progress
          choco install -y visualstudio2022community --package-parameters "--add Microsoft.VisualStudio.Workload.NativeDesktop" --no-progress
          choco install -y 7zip --no-progress
          choco install -y openssl --no-progress
          choco install -y curl --no-progress
          choco install -y unzip --no-progress

      - name: Run build and release script
        run: |
          bash .github/scripts/build_and_package_${{ env.TARGET_OS }}_${{ env.ARCH }}_${{ env.FILE_TYPE }}.sh && .github/scripts/build_and_package_${{ env.TARGET_OS }}_${{ env.ARCH }}_${{ env.FILE_TYPE }}.sh ${{ github.ref_name }}
        shell: bash

      - name: Upload artifacts to existing GitHub release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TAG=${{ github.ref_name }}
          REPO=${{ github.repository }}
          echo "Uploading all artifacts for $TAG to release..."
          for FILE in ./all-artifacts/${{ env.TARGET_OS }}/*; do
            LABEL=$(basename "$FILE")
            gh release upload "$TAG" "$FILE#$LABEL" --clobber --repo "$REPO"
          done

      - name: Generate release download links
        run: |
          TAG=${{ github.ref_name }}
          FILE=PactusGUI-${TAG}-${{ env.TARGET_OS }}-${{ env.ARCH }}.${{ env.FILE_TYPE }}
          DOWNLOAD_URL="https://github.com/${{ github.repository }}/releases/download/${TAG}/${FILE}"
          RELEASE_URL="https://github.com/${{ github.repository }}/releases/tag/${TAG}"
          echo "Download URL: $DOWNLOAD_URL"
          echo "Release URL: $RELEASE_URL"
