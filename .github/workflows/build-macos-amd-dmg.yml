name: Build & Release MacOs (AMD64/dmg)

on:
  push:
    tags:
      - 'v*'

env:
  FLUTTER_VERSION: 3.32.0
  TARGET_OS: macos # example `linux` , `windows` , `macos`
  ARCH: amd64 # example `arm64` , `amd64`
  FILE_TYPE: dmg # example `AppImage` , `zip` , `dmg`


jobs:
  build-and-release:
    runs-on: macos-latest
    outputs:
      tag_name: ${{ steps.set-outputs.outputs.tag_name }}
      download_link: ${{ steps.set-outputs.outputs.download_link }}

    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Flutter ${{ env.FLUTTER_VERSION }}
        run: |
          git clone https://github.com/flutter/flutter.git --branch ${{ env.FLUTTER_VERSION }} --depth 1
          echo "$PWD/flutter/bin" >> $GITHUB_PATH

      - name: Configure Flutter
        run: |
          flutter doctor -v
          flutter config --enable-${{ env.TARGET_OS }}-desktop
          flutter precache --${{ env.TARGET_OS }}

      - name: Install dependencies
        shell: bash
        run: |
          # Install Homebrew (if not already installed)
          /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
          # Install required dependencies
          brew install cmake pkg-config ninja
          brew install unzip
          brew install create-dmg

      - name: Run build and release script
        run: chmod +x .github/scripts/build_and_package_${{ env.TARGET_OS }}_${{ env.ARCH }}_${{ env.FILE_TYPE }}.sh && .github/scripts/build_and_package_${{ env.TARGET_OS }}_${{ env.ARCH }}_${{ env.FILE_TYPE }}.sh ${{ github.ref_name }}

      - name: Upload build file to GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TAG="${{ github.ref_name }}"
          FILE_PATH="artifacts/PactusGUI-${{ github.ref_name }}-${{ env.TARGET_OS }}-${{ env.ARCH }}.${{ env.FILE_TYPE }}"
          
          echo "Uploading $FILE_PATH to release $TAG..."
          
          if [ ! -f "$FILE_PATH" ]; then
            echo "❌ Error: File $FILE_PATH not found!"
            exit 1
          fi
          
          gh release upload "$TAG" "$FILE_PATH" --clobber
          echo "✅ Successfully uploaded $FILE_PATH to release $TAG"

      - name: Generate release download links
        run: |
          TAG=${{ github.ref_name }}
          FILE=PactusGUI-${TAG}-${{ env.TARGET_OS }}-${{ env.ARCH }}.${{ env.FILE_TYPE }}
          DOWNLOAD_URL="https://github.com/${{ github.repository }}/releases/download/${TAG}/${FILE}"
          RELEASE_URL="https://github.com/${{ github.repository }}/releases/tag/${TAG}"
          echo "Download URL: $DOWNLOAD_URL"
          echo "Release URL: $RELEASE_URL"
